{"name":"Go-V8","tagline":"V8 JavaScript engine bindings for Go","body":"Features\r\n=======\r\n\r\n* Thread safe\r\n* Thorough and careful testing\r\n* Boolean, Number, String, Object, Array, Regexp, Function\r\n* Compile and run JavaScript\r\n* Save and load pre-compiled script data\r\n* Create JavaScript context with global object template\r\n* Operate JavaScript object properties and array elements in Go\r\n* Define JavaScript object template in Go with property accessors and interceptors\r\n* Define JavaScript function template in Go\r\n* Catch JavaScript exception in Go\r\n* Throw JavaScript exception by Go\r\n* JSON parse and generate\r\n\r\nInstall\r\n=======\r\n\r\nFor 'curl' user. please run this shell command:\r\n\r\n> curl -O https://raw.github.com/idada/go-v8/master/get.sh && chmod +x get.sh && ./get.sh go-v8\r\n\r\nFor 'wget' user. Please run this shell command:\r\n\r\n> wget https://raw.github.com/idada/go-v8/master/get.sh && chmod +x get.sh && ./get.sh go-v8\r\n\r\nNote: require Go version 1.2 and Git.\r\n\r\nHello World\r\n===========\r\n\r\nThis 'Hello World' program shows how to use go-v8 to compile and run JavaScript code then get the result.\r\n\r\n```go\r\npackage main\r\n\r\nimport \"github.com/idada/go-v8\"\r\n\r\nfunc main() {\r\n\tengine := v8.NewEngine()\r\n\tscript := engine.Compile([]byte(\"'Hello ' + 'World!'\"), nil, nil)\r\n\tcontext := engine.NewContext(nil)\r\n\r\n\tcontext.Scope(func(cs v8.ContextScope) {\r\n\t\tresult := script.Run()\r\n\t\tprintln(result.ToString())\r\n\t})\r\n}\r\n```\r\n\r\nPerformance and Stability \r\n=========================\r\n\r\nThe benchmark result on my iMac:\r\n\r\n```\r\nNewContext     249474 ns/op\r\nNewInteger        984 ns/op\r\nNewString         983 ns/op\r\nNewObject        1036 ns/op\r\nNewArray0        1130 ns/op\r\nNewArray5        1314 ns/op\r\nNewArray20       1666 ns/op\r\nNewArray100      3124 ns/op\r\nCompile         11059 ns/op\r\nPreCompile      11697 ns/op\r\nRunScript        1085 ns/op\r\nJsFunction       1114 ns/op\r\nGoFunction       1630 ns/op\r\nGetter           2060 ns/op\r\nSetter           2934 ns/op\r\nTryCatch        43097 ns/op\r\n```\r\n\r\nI write many test and benchmark to make sure go-v8 stable and efficient.\r\n\r\nThere is a shell script named 'test.sh' in the project. \r\n\r\nIt can auto configure cgo environment variables and run test.\r\n\r\nFor example:\r\n\r\n```\r\n./test.sh . .\r\n```\r\n\r\nThe above command will run all of test and benchmark.\r\n\r\nThe first argument of test.sh is test name pattern, second argument is benchmark name pattern.\r\n\r\nFor example:\r\n\r\n```\r\n./test.sh ThreadSafe Array\r\n```\r\n\r\nThe above command will run all of thread safe test and all of benchmark about Array type.\r\n\r\nConcepts\r\n========\r\n\r\nEngine\r\n------\r\n\r\nIn go-v8, engine type is the wrapper of v8::Isolate.\r\n\r\nBecause V8 engine use thread-local storage but cgo calls may be execute in different thread. So go-v8 use v8::Locker to make sure V8 engine's thread-local data initialized. And the locker make go-v8 thread safe.\r\n\r\nYou can create different engine instance for data isolate or improve efficiency of concurrent purpose.\r\n\r\n```go\r\nengine1 := v8.NewEngine()\r\nengine2 := v8.NewEngine()\r\n```\r\n\r\nScript\r\n------\r\n\r\nWhen you want to run some JavaScript. You need to compile first.\r\n\r\nScripts can run many times or run in different context.\r\n\r\n```go\r\nscript := engine.Compile([]byte(`\"Hello \" + \"World!\"`), nil, nil)\r\n```\r\n\r\nThe Engine.Compile() method take 3 arguments. \r\n\r\nThe first is the code.\r\n\r\nThe second is a ScriptOrigin, it stores script's file name or line number offset etc. You can use ScriptOrigin to make error message and stack trace friendly.\r\n\r\n```go\r\nname := \"my_file.js\"\r\nreal := ReadFile(name)\r\ncode := \"function(_export){\\n\" + realcode + \"\\n}\"\r\norigin := engine.NewScriptOrigin(name, 1, 0)\r\n```\r\n\r\nThe third is a ScriptData, it's pre-parsing data, as obtained by Engine.PreCompile(). If you want to compile a script many time, you can use ScriptData to speeds compilation. \r\n\r\n```go\r\ncode := []byte(`\"Hello \" + \"World!\"`)\r\ndata := engine.PreCompile(code)\r\nscript1 := engine.Compile(code, nil, data)\r\nscript2 := engine.Compile(code, nil, data)\r\n```\r\n\r\nContext\r\n-------\r\n\r\nThe description in V8 embedding guide:\r\n\r\n> In V8, a context is an execution environment that allows separate, unrelated, JavaScript applications to run in a single instance of V8. You must explicitly specify the context in which you want any JavaScript code to be run.\r\n\r\nIn go-v8, you can create many contexts from a V8 engine instance. When you want to run some JavaScript in a context. You need to enter the context by calling Scope() and run the JavaScript in the callback.\r\n\r\n```go\r\ncontext.Scope(func(cs v8.ContextScope){\r\n\tscript.Run()\r\n})\r\n```\r\n\r\nContext in V8 is necessary. So in go-v8 you can do this:\r\n\r\n```go\r\ncontext.Scope(func(cs v8.ContextScope) {\r\n\tcontext2 := engine.NewContext(nil)\r\n\tcontext2.Scope(func(cs2 v8.ContextScope) {\r\n\r\n\t})\r\n})\r\n```\r\n\r\nPlease note. Don't take any JavaScript value out scope.\r\n\r\nWhen the outermost Scope() return, all of the JavaScript value created in this scope or nested scope will be destroyed.\r\n\r\nMore\r\n----\r\n\r\nPlease read 'v8_all_test.go' for more information.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}